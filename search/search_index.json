{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#getting-started","title":"Getting Started","text":"<p>This documents will have information about working with smart-digi-build application. and it's deployment on ubuntu server.</p>"},{"location":"#user-roles","title":"User Roles","text":"<p>The application have four user roles, and multiple user groups which user can create based on it's requirement.</p> <ul> <li>Super admin  - sa</li> <li>Customer admin - admin</li> <li>Facility admin - facility</li> <li>User - user</li> </ul>"},{"location":"#structure","title":"Structure","text":"<p>The application developed with API First approach, and it's have two parts.</p> <ul> <li>Backend - API</li> <li>Frontend - Web</li> </ul>"},{"location":"#backend","title":"Backend","text":"<p>The backend is developed with FastAPI Rest Framework.</p> <pre><code>PYTHON 3.11.3\n</code></pre>"},{"location":"#frontend","title":"Frontend","text":"<p>The frontend is developed with ReactJS.</p> <pre><code>TBD\n</code></pre>"},{"location":"#database","title":"Database","text":"<p>The database is developed using MongoDB.</p> <pre><code>MongoDB version 6.0.8\n</code></pre>"},{"location":"#login","title":"Login","text":"<p>The below login screen is common for all the users, Redirect based on user role handled on frontend.</p> <p> </p> Login"},{"location":"customer-admin/","title":"Customer Admin","text":""},{"location":"customer-admin/#login","title":"Login","text":""},{"location":"customer-admin/#dashboard","title":"Dashboard","text":""},{"location":"customer-admin/#location","title":"Location","text":""},{"location":"customer-admin/#list-location","title":"List Location","text":""},{"location":"customer-admin/#create-location","title":"Create Location","text":""},{"location":"customer-admin/#update-location","title":"Update Location","text":""},{"location":"customer-admin/#delete-location","title":"Delete Location","text":""},{"location":"customer-admin/#building","title":"Building","text":""},{"location":"customer-admin/#list-building","title":"List Building","text":""},{"location":"customer-admin/#create-building","title":"Create Building","text":""},{"location":"customer-admin/#update-building","title":"Update Building","text":""},{"location":"customer-admin/#delete-building","title":"Delete Building","text":""},{"location":"customer-admin/#floor","title":"Floor","text":""},{"location":"customer-admin/#list-floor","title":"List Floor","text":""},{"location":"customer-admin/#create-floor","title":"Create Floor","text":""},{"location":"customer-admin/#update-floor","title":"Update Floor","text":""},{"location":"customer-admin/#delete-floor","title":"Delete Floor","text":""},{"location":"customer-admin/#zone","title":"Zone","text":""},{"location":"customer-admin/#list-zone","title":"List Zone","text":""},{"location":"customer-admin/#create-zone","title":"Create Zone","text":""},{"location":"customer-admin/#update-zone","title":"Update Zone","text":""},{"location":"customer-admin/#delete-zone","title":"Delete Zone","text":""},{"location":"customer-admin/#device","title":"Device","text":""},{"location":"customer-admin/#list-device","title":"List Device","text":""},{"location":"customer-admin/#create-device","title":"Create Device","text":""},{"location":"customer-admin/#update-device","title":"Update Device","text":""},{"location":"customer-admin/#delete-device","title":"Delete Device","text":""},{"location":"customer-admin/#module","title":"Module","text":""},{"location":"customer-admin/#list-module","title":"List Module","text":""},{"location":"customer-admin/#user","title":"User","text":""},{"location":"customer-admin/#list-user","title":"List User","text":""},{"location":"customer-admin/#create-user","title":"Create User","text":""},{"location":"customer-admin/#update-user","title":"Update User","text":""},{"location":"customer-admin/#delete-user","title":"Delete User","text":""},{"location":"customer-admin/#logout","title":"Logout","text":""},{"location":"customer-admin/#settings","title":"Settings","text":""},{"location":"customer-admin/#logs","title":"Logs","text":""},{"location":"customer-admin/#personalization","title":"Personalization","text":""},{"location":"customer-admin/#reports","title":"Reports","text":""},{"location":"deployment/","title":"Deployment","text":""},{"location":"deployment/#backend","title":"Backend","text":""},{"location":"deployment/#server-setup","title":"Server Setup","text":"<ul> <li>Ubuntu 22.04.2 LTS (Jammy Jellyfish)</li> <li>Python 3.11.3</li> </ul>"},{"location":"deployment/#secure-server-optional","title":"Secure server (Optional)","text":"<ul> <li>Make sure server has the latest software</li> </ul> <pre><code>sudo apt update &amp;&amp; sudo apt upgrade -y\n</code></pre> <ul> <li><code>sudo apt update</code> - update the package list index on the system</li> <li> <p><code>sudo apt upgrade</code> - upgrade the installed packages on the system to their latest verions. <code>-y</code> flag will automatically answer yes to all questions</p> </li> <li> <p>Install <code>unattended-upgrades</code> package to automatically install security updates</p> </li> </ul> <pre><code>sudo apt install unattended-upgrades\n</code></pre> <p>Once installed, edit the <code>/etc/apt/apt.conf.d/20auto-upgrades</code> file and include the following line:</p> <pre><code>APT::Periodic::Update-Package-Lists \"1\";\nAPT::Periodic::Unattended-Upgrade \"1\";\nAPT::Periodic::AutocleanInterval \"7\";\n</code></pre> <ul> <li><code>APT::Periodic::Update-Package-Lists \"1\";</code> - update the package list index on the system (update every day)</li> <li><code>APT::Periodic::Unattended-Upgrade \"1\";</code> - upgrade the installed packages on the system to their latest verions</li> <li><code>APT::Periodic::AutocleanInterval \"7\";</code> - remove old packages from the cache (remove every 7 days)</li> </ul> <p>Edit the <code>/etc/apt/apt.conf.d/50unattended-upgrades</code> file and include the following line to auto reboot the kernel updates (if any)</p> <pre><code>Unattended-Upgrade::Automatic-Reboot \"true\";\n</code></pre>"},{"location":"deployment/#create-a-non-root-user","title":"Create a Non-Root User","text":"<ul> <li>Create a new user</li> </ul> <pre><code>sudo adduser &lt;username&gt;\nsudo gpasswd -a &lt;username&gt; sudo\nsu - &lt;username&gt;\n</code></pre>"},{"location":"deployment/#setup-ssh-key","title":"Setup SSH Key","text":"<ul> <li>Generate SSH key on local machine</li> </ul> <pre><code>ssh-keygen -t ed25519 -C \"username@email.com\"\n</code></pre> <ul> <li>Copy the public key to the server</li> </ul> <pre><code>cat ~/.ssh/id_ed25519.pub\n</code></pre> <ul> <li>Login to the server and create <code>.ssh</code> directory</li> </ul> <pre><code>mkdir ~/.ssh\nchmod 700 ~/.ssh\n</code></pre> <ul> <li>Once this user is created, we need to disable root login and password authentication</li> </ul> <pre><code>sudo nano /etc/ssh/sshd_config\n</code></pre> <ul> <li>Change the following lines</li> </ul> <pre><code>PermitRootLogin no\nPasswordAuthentication no\n</code></pre>"},{"location":"deployment/#install-pre-requisites","title":"Install Pre-requisites","text":"<ul> <li>Install python3.11</li> </ul> <pre><code>sudo add-apt-repository ppa:deadsnakes/ppa\nsudo apt update\nsudo apt install python3.11 python3.11-dev python3.11-venv\n</code></pre> <ul> <li>Install Supervisor and Nginx</li> </ul> <pre><code>sudo apt install supervisor nginx\n</code></pre> <ul> <li>Enable Supervisor</li> </ul> <pre><code>sudo systemctl enable supervisor\nsudo systemctl start supervisor\n</code></pre>"},{"location":"deployment/#install-mongodb","title":"Install MongoDB","text":"<ul> <li>Install Gnupg and curl</li> </ul> <pre><code>sudo apt install gnupg curl\n</code></pre> <pre><code>curl -fsSL https://pgp.mongodb.com/server-7.0.asc | \\\n   sudo gpg -o /usr/share/keyrings/mongodb-server-7.0.gpg \\\n   --dearmor\n</code></pre> <ul> <li>Create the list file <code>/etc/apt/sources.list.d/mongodb-org-7.0.list</code> for MongoDB</li> </ul> <pre><code>echo \"deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list\n</code></pre> <ul> <li>Reload local package database</li> </ul> <pre><code>sudo apt update\n</code></pre> <ul> <li>Install MongoDB</li> </ul> <pre><code>sudo apt-get install -y mongodb-org\n</code></pre> <p>Optional. Although you can specify any available version of MongoDB, apt-get will upgrade the packages when a newer version becomes available. To prevent unintended upgrades, you can pin the package at the currently installed version:</p> <pre><code>echo \"mongodb-org hold\" | sudo dpkg --set-selections\necho \"mongodb-org-database hold\" | sudo dpkg --set-selections\necho \"mongodb-org-server hold\" | sudo dpkg --set-selections\necho \"mongodb-mongosh hold\" | sudo dpkg --set-selections\necho \"mongodb-org-mongos hold\" | sudo dpkg --set-selections\necho \"mongodb-org-tools hold\" | sudo dpkg --set-selections\n</code></pre> <ul> <li>Start MongoDB</li> </ul> <pre><code>sudo systemctl start mongod\n</code></pre> <ul> <li>Verify that MongoDB has started successfully</li> </ul> <pre><code>sudo systemctl status mongod\n</code></pre> <ul> <li>Enable MongoDB during system startup</li> </ul> <pre><code>sudo systemctl enable mongod\n</code></pre> <ul> <li>Restart MongoDB</li> </ul> <pre><code>sudo systemctl restart mongod\n</code></pre> <ul> <li>MongoDB Shell</li> </ul> <pre><code>    mongosh\n</code></pre> <p>Note: Refer MongoDB for more details</p>"},{"location":"deployment/#setup-app","title":"Setup App","text":"<ul> <li>Create a directory for the app</li> </ul> <pre><code>mkdir -p ~/apps/smart-digi-build\n</code></pre> <ul> <li>Clone the app</li> </ul> <pre><code>git clone &lt;git-url&gt; ~/apps/smart-digi-build\n</code></pre> <ul> <li>Filezilla (Optional)</li> </ul> <p>If you are using Filezilla, you can use the below steps to copy the files to the server.</p> <ul> <li>Open Filezilla and connect to the server</li> <li>Navigate to the <code>~/apps/smart-digi-build</code> directory</li> <li> <p>Copy the files from local machine to the server</p> </li> <li> <p>Create a virtual environment</p> </li> </ul> <pre><code>cd ~/apps/smart-digi-build\npython3.11 -m venv venv\n</code></pre> <ul> <li>Activate the virtual environment</li> </ul> <pre><code>source venv/bin/activate\n</code></pre> <ul> <li>Install the requirements</li> </ul> <pre><code>pip install -r requirements.txt\n</code></pre> <ul> <li>Verify the installation</li> </ul> <pre><code>Uvicorn app.main:app --reload\n</code></pre>"},{"location":"deployment/#configure-gunicorn","title":"Configure Gunicorn","text":"<ul> <li>Install Gunicorn (make sure virtual environment is activated)</li> </ul> <pre><code>pip install gunicorn\n</code></pre> <ul> <li>Create a Gunicorn config file</li> </ul> <pre><code>sudo nano gunicorn_start\n</code></pre> <ul> <li>Add the following lines</li> </ul> <pre><code>#!/bin/bash\n\nNAME=&lt;app-name&gt;\nDIR=/apps/smart-digi-build/\nUSER=&lt;user-name&gt;\nGROUP=&lt;user-group&gt;\nWORKERS=3\nWORKER_CLASS=uvicorn.workers.UvicornWorker\nVENV=$DIR/.venv/bin/activate\nBIND=unix:$DIR/run/gunicorn.sock\nLOG_LEVEL=error\n\ncd $DIR\nsource $VENV\n\nexec gunicorn app.main:app \\\n  --name $NAME \\\n  --workers $WORKERS \\\n  --worker-class $WORKER_CLASS \\\n  --user=$USER \\\n  --group=$GROUP \\\n  --bind=$BIND \\\n  --log-level=$LOG_LEVEL \\\n  --log-file=-\n\n</code></pre> <ul> <li>Make the file executable</li> </ul> <pre><code>chmod u+x gunicorn_start\n</code></pre> <ul> <li>Create run folder in the project directory</li> </ul> <pre><code>mkdir run\n</code></pre>"},{"location":"deployment/#configure-supervisor","title":"Configure Supervisor","text":"<ul> <li>Create directory called logs in the project directory</li> </ul> <pre><code>mkdir logs\n</code></pre> <ul> <li>Create a Supervisor config file</li> </ul> <pre><code>sudo nano /etc/supervisor/conf.d/&lt;app-name&gt;.conf\n</code></pre> <ul> <li>Add the following lines</li> </ul> <pre><code>[program:&lt;app-name&gt;]\ncommand=/apps/smart-digi-build/gunicorn_start\nuser=&lt;user-name&gt;\nautostart=true\nautorestart=true\nredirect_stderr=true\nstdout_logfile=/apps/smart-digi-build/logs/gunicorn_supervisor.log\n</code></pre> <ul> <li>Update Supervisor</li> </ul> <pre><code>sudo supervisorctl reread\nsudo supervisorctl update\n</code></pre> <ul> <li>Start the app</li> </ul> <pre><code>sudo supervisorctl start &lt;app-name&gt;\n</code></pre> <ul> <li>Check the status</li> </ul> <pre><code>sudo supervisorctl status &lt;app-name&gt;\n</code></pre> <ul> <li>Restart the app</li> </ul> <pre><code>sudo supervisorctl restart &lt;app-name&gt;\n</code></pre>"},{"location":"deployment/#configure-nginx","title":"Configure Nginx","text":"<ul> <li>Create a Nginx config file</li> </ul> <pre><code>sudo nano /etc/nginx/sites-available/&lt;app-name&gt;\n</code></pre> <ul> <li>Add the following lines</li> </ul> <pre><code>upstream app_server {\n    server unix:/apps/smart-digi-build/run/gunicorn.sock fail_timeout=0;\n}\n\nserver {\n    listen 80;\n\n    # add here the ip address of your server\n    # or a domain pointing to that ip (like example.com or www.example.com)\n    server_name XXXX;\n\n    keepalive_timeout 5;\n    client_max_body_size 4G;\n\n    access_log /apps/smart-digi-build/logs/nginx-access.log;\n    error_log /apps/smart-digi-build/logs/nginx-error.log;\n\n    location / {\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_redirect off;\n\n        if (!-f $request_filename) {\n            proxy_pass http://app_server;\n            break;\n        }\n    }\n}\n</code></pre> <p>Depend on the port you are using, you can change the <code>listen</code> port in the above config file.</p> <ul> <li>Create a symbolic link</li> </ul> <pre><code>sudo ln -s /etc/nginx/sites-available/&lt;app-name&gt; /etc/nginx/sites-enabled/&lt;app-name&gt;\n</code></pre> <ul> <li>Test the Nginx config</li> </ul> <pre><code>sudo nginx -t\n</code></pre> <ul> <li>Restart Nginx</li> </ul> <pre><code>sudo systemctl restart nginx\n</code></pre>"},{"location":"deployment/#ssl-certificate-lets-encrypt","title":"SSL Certificate (Lets Encrypt)","text":"<ul> <li>Install Certbot</li> </ul> <pre><code>sudo apt install certbot python3-certbot-nginx\n</code></pre> <ul> <li>Obtain a certificate</li> </ul> <pre><code>sudo certbot --nginx -d &lt;domain-name&gt;\n</code></pre> <ul> <li>Test automatic renewal</li> </ul> <pre><code>sudo certbot renew --dry-run\n</code></pre>"},{"location":"deployment/#frontend","title":"Frontend","text":""},{"location":"deployment/#setup-app_1","title":"Setup App","text":"<ul> <li>Create a directory for the app</li> </ul> <pre><code>mkdir -p ~/apps/smart-digi-build-web\n</code></pre> <ul> <li>Clone the app</li> </ul> <pre><code>git clone &lt;git-url&gt; ~/apps/smart-digi-build-web\n</code></pre> <ul> <li>Filezilla (Optional)</li> </ul> <p>If you are using Filezilla, you can use the below steps to copy the files to the server.</p> <ul> <li>Open Filezilla and connect to the server</li> <li>Navigate to the <code>~/apps/smart-digi-build-web</code> directory</li> <li>Copy the files from local machine to the server</li> </ul>"},{"location":"deployment/#nginx-config","title":"Nginx Config","text":"<ul> <li>Create a Nginx config file</li> </ul> <pre><code>sudo nano /etc/nginx/sites-available/&lt;app-name&gt;\n</code></pre> <ul> <li>Add the following lines</li> </ul> <pre><code>server {\n    listen 80;\n    server_name XXXX;\n\n    location / {\n        root /apps/smart-digi-build-web/build;\n        index index.html index.htm;\n        try_files $uri /index.html;\n    }\n}\n</code></pre> <ul> <li>Create a symbolic link</li> </ul> <pre><code>sudo ln -s /etc/nginx/sites-available/&lt;app-name&gt; /etc/nginx/sites-enabled/&lt;app-name&gt;\n</code></pre> <ul> <li>Test the Nginx config</li> </ul> <pre><code>sudo nginx -t\n</code></pre> <ul> <li>Restart Nginx</li> </ul> <pre><code>sudo systemctl restart nginx\n</code></pre> <p>Depend on the port you are using, you can change the <code>listen</code> port in the above config file. </p> <p>Note: When building front end application make sure to point the backend url to the server url. For example, if the backend is running on port 8000 and the server url is <code>http://localhost:8000</code>, then the backend url should be <code>http://&lt;server-ip&gt;:8000</code></p>"},{"location":"facility/","title":"Facility User","text":""},{"location":"facility/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"facility/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"modules/","title":"Modules","text":""},{"location":"modules/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"modules/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"super-admin/","title":"Super Admin","text":""},{"location":"super-admin/#login","title":"Login","text":"<p>Super admin login page is similar to other users, but it's have access to all the customers and it's modules.</p> <p>user role for super admin is <code>sa</code></p> <p>Atleast one super admin user is required to access the application. Initial super admin need to be created using directly using mongodb compass /  mongo shell.</p> <p> </p> Login <p>Note: In the future version we can move this as a part of initial setup, commands. </p>"},{"location":"super-admin/#dashboard","title":"Dashboard","text":"<p>Currently we are not having any dashboard for super admin, but we can add it in the future versions. depend on the requirement.</p> <p> </p> Super Admin Dashboard"},{"location":"super-admin/#customer","title":"Customer","text":"<p>Customer is the main entity in the application, and only super admin can create customer. During the customer creation, super admin need to provide the customer admin details.  Customer admin is the main user for the customer, and it's have access to all the modules and it's users. Refer custome admin pages for it's functionality.</p>"},{"location":"super-admin/#list-customer","title":"List Customer","text":"<p>It will list all the customers in the application, and super admin can perform CRUD operations on it.</p> <p> </p> Customer List"},{"location":"super-admin/#create-customer","title":"Create Customer","text":"<p>Super admin can create customer using the below screen, and it's mandatory to provide customer admin details.</p> <p> </p> Create Customer <p> </p> Add Customer Admin"},{"location":"super-admin/#update-customer","title":"Update Customer","text":"<p>Update customer screen are similar to create customer screen, but it's have edit buttons to update the customer details.</p> <p>Note: Some test cases are failing during editing customer details, need to fix it.</p>"},{"location":"super-admin/#delete-customer","title":"Delete Customer","text":"<p>Delete customer will delete the customer. </p> <p> </p> Delete Customer <p> </p> Delete Confirmation <p>Note: Be careful while deleting the customer, it will delete all the customer data, and it's not recoverable.</p>"},{"location":"super-admin/#module","title":"Module","text":"<p>TBD</p>"},{"location":"super-admin/#user","title":"User","text":"<p>When super admin adds users it will be always super admin users, and it's have access to all the customers and it's modules. Currently we are not having any user management for super admin, but we can add it in the future versions. depend on the requirement.</p>"},{"location":"super-admin/#list-user","title":"List User","text":"Super admin user List"},{"location":"super-admin/#create-user","title":"Create User","text":"Create User"},{"location":"super-admin/#update-user","title":"Update User","text":"<p>Update user fields will have similar fields as a create user, but it's have edit buttons to update the user details.</p> <p></p> Update User"},{"location":"super-admin/#delete-user","title":"Delete User","text":"<p>Delete user will delete the user.</p>"},{"location":"super-admin/#logout","title":"Logout","text":"<p>Logout will logout the user from the application, and it will redirect to login page.</p> <p></p> Logout"},{"location":"super-admin/#settings","title":"Settings","text":"<p>TBD </p>"},{"location":"super-admin/#logs","title":"Logs","text":"<p>TBD</p>"},{"location":"super-admin/#personalization","title":"Personalization","text":"<p>TBD</p>"},{"location":"super-admin/#reports","title":"Reports","text":"<p>TBD</p>"},{"location":"user/","title":"User","text":""},{"location":"user/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"user/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"}]}